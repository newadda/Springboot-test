/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import batch.DBBatchConfig;
import batch.DBManager;
import org.junit.Test;
import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.JobFactory;
import org.springframework.batch.core.configuration.JobLocator;
import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.support.AutomaticJobRegistrar;
import org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor;
import org.springframework.batch.core.configuration.support.MapJobRegistry;
import org.springframework.batch.core.configuration.support.ReferenceJobFactory;
import org.springframework.batch.core.job.flow.FlowJob;
import org.springframework.batch.core.jsr.configuration.xml.JobFactoryBean;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.JobOperator;
import org.springframework.batch.core.launch.support.SimpleJobOperator;
import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.NonTransientResourceException;
import org.springframework.batch.item.ParseException;
import org.springframework.batch.item.UnexpectedInputException;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.transaction.interceptor.TransactionProxyFactoryBean;
import org.vibur.dbcp.ViburDBCPDataSource;

import javax.sql.DataSource;
import java.util.Date;
import java.util.Set;

public class jobTest {



    /**
     * 10초동안 잠자는 작업
     */
    public static class MyTasklet implements Tasklet {

        @Override
        public RepeatStatus execute(StepContribution arg0, ChunkContext arg1) throws Exception {
            int commitCount = arg1.getStepContext().getStepExecution().getCommitCount();
            int skipCount = arg0.getSkipCount();

            System.out.println("Hello This is a sample example of spring batch : "+commitCount);
            System.out.println("Hello This is a sample example of spring batch : "+skipCount);
            Thread.sleep(1000);
            return RepeatStatus.CONTINUABLE;
        }
    }


    /**
     * DataSource 설정
     * @param datasourceUrl
     * @param dbDriverClassName
     * @param dbUsername
     * @param dbPassword
     * @return
     */
    public DataSource getDataSource(   String datasourceUrl,
                                      String dbDriverClassName,
                                      String dbUsername,
                                     String dbPassword)
    {
        ViburDBCPDataSource dataSource = new ViburDBCPDataSource();

        dataSource.setJdbcUrl(datasourceUrl);
        dataSource.setDriverClassName(dbDriverClassName);
        // dataSource.setUrl(datasourceUrl);
        dataSource.setUsername(dbUsername);
        dataSource.setPassword(dbPassword);

        dataSource.setPoolInitialSize(10);
        dataSource.setPoolMaxSize(100);

        dataSource.setConnectionIdleLimitInSeconds(30);


        dataSource.setLogQueryExecutionLongerThanMs(500);
        dataSource.setLogStackTraceForLongQueryExecution(true);

        dataSource.setStatementCacheMaxSize(200);

        dataSource.start();

        return dataSource;
    }







    @Test public void testSomeLibraryMethod() throws Exception {

        DataSource dataSource = getDataSource("jdbc:mysql://192.168.0.2:3306/oauth2?useSSL=false&characterEncoding=utf-8", "com.mysql.cj.jdbc.Driver"
                , "shh", "shh");
        DBManager dbManager = new DBManager(dataSource);

        DBBatchConfig DBBatchConfig = new DBBatchConfig(dataSource);



        JobBuilderFactory jobBuilderFactory = DBBatchConfig.getJobBuilderFactory();

        StepBuilderFactory stepBuilderFactory = DBBatchConfig.getStepBuilderFactory();

        TaskletStep step1 = stepBuilderFactory.get("step1").tasklet(new MyTasklet()).build();
        Job test = jobBuilderFactory.get("test").start(step1)
                .build();

        Set<JobExecution> test2 = DBBatchConfig.getJobExplorer().findRunningJobExecutions("test");

        SimpleJobOperator s = new SimpleJobOperator();
        s.setJobExplorer(DBBatchConfig.getJobExplorer());
        s.setJobLauncher(DBBatchConfig.getJobLauncher());
        s.setJobRepository(DBBatchConfig.getJobRepository());


        for (JobExecution j: test2
             ) {
            System.out.println(j.getId());
            j.setStatus(BatchStatus.FAILED);
       //     j.setEndTime(new Date());
           // DBBatchConfig.getJobRepository().update(j);
        }
        System.in.read();


        JobLauncher jobLauncher = DBBatchConfig.getJobLauncher();

        JobParameters jobParameters = new JobParametersBuilder().addLong("time", System.currentTimeMillis())
                .toJobParameters();


        JobRegistryBeanPostProcessor jobRegistryBeanPostProcessor = new JobRegistryBeanPostProcessor();


        MapJobRegistry mapJobRegistry = new MapJobRegistry();

        //  automaticJobRegistrar.setJobLoader();

        mapJobRegistry.register(new ReferenceJobFactory(test));
       // mapJobRegistry.unregister("test");

        Job test1 = mapJobRegistry.getJob("test");

        jobLauncher.run(test,jobParameters);

        ;

        System.out.println(test);
        System.in.read();
       // jobLauncher.run(test,jobParameters);

    }




}
